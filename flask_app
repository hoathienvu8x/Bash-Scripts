#!/bin/bash

# Copy from [12a9583479f7694f94c9](https://gist.github.com/parashardhapola/12a9583479f7694f94c9)

project_name="${1:-}"
project_dir="${2:-}"

if [ "$project_name" == "" ]; then
    echo "Project Name ?"
    exit
fi

if [ "$project_dir" == "" ]; then
    project_dir="$HOME/flask-apps"
fi

project_dname="${project_name// /_}" # Replace space to "_" charactor
project_dname=`echo $project_dname | sed "s/[^[:alnum:]-]/_/g"` # Remove all charactor is not alphabet

project_dname="${project_dname//-/_}" # Replace "-" to "_" 
project_dname=`echo $project_dname | sed "s/_\{1,\}/_/g"` # Remove multi "_" to one
project_dname=`echo $project_dname | sed "s/_$//g"` # Right "_" charactor

project_name="${project_dname//_/ }" # Revert "_" to space in name print in template

mkdir -p $project_dir

project_path="$project_dir/$project_dname"

if [ ! -d "$project_path" ]; then
    mkdir -p $project_path
elif [ "$(ls -A $project_path)" ]; then
    echo "$project_path is not empty."
    exit
fi

cd $project_path

mkdir -p static templates data

# touch forms.py

cat > __init__.py << EOF
from flask import Flask
from flask_htmlmin import HTMLMIN

app = Flask(__name__)
app.config['MINIFY_HTML'] = True
htmlmin = HTMLMIN(app)

from $project_dname import views
EOF

cat > views.py << EOF
from $project_dname import app
from flask import render_template, Markup
import markdown

# https://developpaper.com/question/flask-jinja2-sqlite3-how-to-save-markdown-format-articles/
"""
Markdown text is stored in the database, and a filter is implemented on the server side in jinja2, 
rendering HTML to display markdown. The filter I defined is as follows:

\`\`\`python
from app import app
from flask import Markup
import markdown

@app.template_filter('markdown')
def neomarkdown(markdown_content):
    content = Markup(markdown.markdown(markdown_content))
    return content
\`\`\`

Usage:

\`\`\`jinja2
{{ html_content | markdown }}
\`\`\`
"""

@app.template_filter('markdown')
def neomarkdown(markdown_content):
    return Markup(markdown.markdown(markdown_content))

@app.route('/')
def index():
    return render_template('index.html')
EOF

cat > run.py << EOF
import os
import sys

sys.path.append(os.path.dirname(os.getcwd()))
from $project_dname import app

if __name__ == '__main__':
    app.run(debug=True) # host = '0.0.0.0', port = 5000, debug = False
EOF

cat > templates/base.html << 'EOF'
<!DOCTYPE html>
<html>
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=0">
    {% block head %}
    {% endblock %}
    </head>
    <body>
    {% block content %}
    {% endblock %}
    </body>
</html>
EOF

cat > templates/index.html << EOF
{% extends 'base.html' %}
{% block head %}
<title>Welcome to $project_name!</title>
<style>
body {
    width: 35em;
    margin: 0 auto;
    font-family: Tahoma, Verdana, Arial, sans-serif;
}
</style>
{% endblock %}
{% block content %}
    <h1>Welcome to $project_name!</h1>
    <p>If you see this page, the web server is successfully installed and working. Further configuration is required.</p>
    <p>For online documentation and support please refer to <a href="https://flask.palletsprojects.com/en/1.1.x/#api-reference" target="_blank">Flask API Reference</a></p>
    <p><em>Thank you for using ${project_name,,}.</em></p>
{% endblock %}
EOF

cat > requirements.txt <<EOF
Flask
Flask-HTMLmin
markdown
EOF
pip install -r requirements.txt

python run.py
